// <auto-generated />
using System;
using ClinicApp.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClinicApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClinicApp.Domain.Common.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("ClinicApp.Domain.DoctorAgg.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Major")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("ClinicApp.Domain.Patient.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("ClinicApp.Domain.SessionAgg.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<byte>("SessionStatus")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("ClinicApp.Domain.DoctorAgg.Doctor", b =>
                {
                    b.OwnsOne("ClinicApp.Domain.DoctorAgg.WorkingTime", "WorkingTime", b1 =>
                        {
                            b1.Property<Guid>("DoctorId")
                                .HasColumnType("uuid");

                            b1.Property<byte>("WorkingDays")
                                .HasColumnType("smallint")
                                .HasColumnName("WorkingDays");

                            b1.HasKey("DoctorId");

                            b1.ToTable("Doctor");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");

                            b1.OwnsMany("ClinicApp.Domain.DoctorAgg.TimeOff", "TimesOff", b2 =>
                                {
                                    b2.Property<Guid>("DoctorId")
                                        .HasColumnType("uuid");

                                    b2.Property<DateTime>("StartDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<DateTime>("EndDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<string>("reason")
                                        .HasMaxLength(255)
                                        .HasColumnType("character varying(255)");

                                    b2.HasKey("DoctorId", "StartDate", "EndDate");

                                    b2.ToTable("Doctor_TimesOff", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("DoctorId");
                                });

                            b1.OwnsOne("ClinicApp.Domain.DoctorAgg.WorkingHours", "WorkingHours", b2 =>
                                {
                                    b2.Property<Guid>("WorkingTimeDoctorId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeOnly>("EndTime")
                                        .HasColumnType("time without time zone")
                                        .HasColumnName("EndTime");

                                    b2.Property<TimeOnly>("StartTime")
                                        .HasColumnType("time without time zone")
                                        .HasColumnName("StartTime");

                                    b2.HasKey("WorkingTimeDoctorId");

                                    b2.ToTable("Doctor");

                                    b2.WithOwner()
                                        .HasForeignKey("WorkingTimeDoctorId");
                                });

                            b1.Navigation("TimesOff");

                            b1.Navigation("WorkingHours")
                                .IsRequired();
                        });

                    b.Navigation("WorkingTime")
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicApp.Domain.SessionAgg.Session", b =>
                {
                    b.HasOne("ClinicApp.Domain.DoctorAgg.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicApp.Domain.Patient.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("ClinicApp.Domain.Common.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ClinicApp.Domain.Common.ValueObjects.TimeRange", "SessionDate", b1 =>
                        {
                            b1.Property<Guid>("SessionId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("Endtime");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("StartTime");

                            b1.HasKey("SessionId");

                            b1.ToTable("Session");

                            b1.WithOwner()
                                .HasForeignKey("SessionId");
                        });

                    b.OwnsOne("ClinicApp.Domain.SessionAgg.SessionDescription", "SessionDescription", b1 =>
                        {
                            b1.Property<Guid>("SessionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("content")
                                .HasColumnType("text")
                                .HasColumnName("Content");

                            b1.HasKey("SessionId");

                            b1.ToTable("Session");

                            b1.WithOwner()
                                .HasForeignKey("SessionId");
                        });

                    b.Navigation("SessionDate")
                        .IsRequired();

                    b.Navigation("SessionDescription")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
